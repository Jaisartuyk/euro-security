#!/usr/bin/env python3
"""
Generador de iconos PWA para EURO SECURITY
Convierte el logo principal en todos los tama√±os necesarios para PWA
"""

import os
import sys
from PIL import Image, ImageDraw, ImageFont
import json

# Configuraci√≥n
LOGO_PATH = "static/images/logos/euro-security-icon.jpg"  # Tu logo cuadrado
ICONS_DIR = "static/icons/"
COMPANY_NAME = "EURO SECURITY"

# Tama√±os requeridos para PWA
ICON_SIZES = [
    72, 96, 128, 144, 152, 192, 384, 512
]

def create_pwa_icon(logo_path, output_path, size, add_background=True):
    """Crea un icono PWA desde el logo"""
    try:
        # Abrir el logo original
        with Image.open(logo_path) as logo:
            # Convertir a RGBA si no lo est√°
            if logo.mode != 'RGBA':
                logo = logo.convert('RGBA')
            
            # Crear imagen cuadrada con fondo
            icon = Image.new('RGBA', (size, size), (30, 58, 138, 255))  # Azul EURO SECURITY
            
            # Calcular tama√±o del logo (80% del icono)
            logo_size = int(size * 0.8)
            logo_resized = logo.resize((logo_size, logo_size), Image.Resampling.LANCZOS)
            
            # Centrar el logo
            x = (size - logo_size) // 2
            y = (size - logo_size) // 2
            
            # Pegar el logo
            icon.paste(logo_resized, (x, y), logo_resized)
            
            # Guardar
            icon.save(output_path, 'PNG', optimize=True)
            print(f"‚úÖ Creado: {output_path} ({size}x{size})")
            
    except Exception as e:
        print(f"‚ùå Error creando {output_path}: {e}")

def generate_all_icons():
    """Genera todos los iconos PWA"""
    print(f"üé® Generando iconos PWA para {COMPANY_NAME}")
    print(f"üìÅ Logo fuente: {LOGO_PATH}")
    print(f"üìÅ Directorio destino: {ICONS_DIR}")
    
    # Verificar que existe el logo
    if not os.path.exists(LOGO_PATH):
        print(f"‚ùå Error: No se encuentra el logo en {LOGO_PATH}")
        print("üí° Aseg√∫rate de que el archivo euro-security-icon.jpg existe")
        return False
    
    # Crear directorio de iconos si no existe
    os.makedirs(ICONS_DIR, exist_ok=True)
    
    # Generar cada tama√±o
    success_count = 0
    for size in ICON_SIZES:
        output_path = os.path.join(ICONS_DIR, f"icon-{size}x{size}.png")
        create_pwa_icon(LOGO_PATH, output_path, size)
        success_count += 1
    
    # Crear badge especial
    badge_path = os.path.join(ICONS_DIR, "badge-72x72.png")
    create_pwa_icon(LOGO_PATH, badge_path, 72)
    
    print(f"\nüéä ¬°Completado! {success_count} iconos generados exitosamente")
    print(f"üì± Los iconos PWA est√°n listos en: {ICONS_DIR}")
    
    return True

def update_manifest():
    """Actualiza el manifest.json con informaci√≥n de branding"""
    manifest_path = "static/manifest.json"
    
    try:
        with open(manifest_path, 'r', encoding='utf-8') as f:
            manifest = json.load(f)
        
        # Actualizar informaci√≥n
        manifest.update({
            "name": f"{COMPANY_NAME} - Control de Asistencias",
            "short_name": COMPANY_NAME,
            "description": "Sistema de control de asistencias con reconocimiento facial y rastreo GPS en tiempo real",
        })
        
        # Guardar
        with open(manifest_path, 'w', encoding='utf-8') as f:
            json.dump(manifest, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Manifest.json actualizado")
        
    except Exception as e:
        print(f"‚ùå Error actualizando manifest: {e}")

if __name__ == "__main__":
    print("=" * 50)
    print("üè¢ GENERADOR DE ICONOS PWA - EURO SECURITY")
    print("=" * 50)
    
    try:
        # Verificar PIL
        from PIL import Image
        print("‚úÖ PIL/Pillow disponible")
        
        # Generar iconos
        if generate_all_icons():
            update_manifest()
            print("\nüöÄ ¬°PWA actualizada con branding de EURO SECURITY!")
            print("üí° Ahora puedes instalar la app con tus logos personalizados")
        
    except ImportError:
        print("‚ùå Error: PIL/Pillow no est√° instalado")
        print("üí° Instala con: pip install Pillow")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        sys.exit(1)
